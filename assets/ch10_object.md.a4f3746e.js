import{_ as s,c as a,o as n,O as l}from"./chunks/framework.41379913.js";const h=JSON.parse('{"title":"对象","description":"","frontmatter":{},"headers":[],"relativePath":"ch10_object.md"}'),p={name:"ch10_object.md"},o=l(`<h1 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h1><p>广义地讲，任何一个在程序中出现的元素都被称作对象。于是对象也拥有自己的类型，比如整数对象、类型对象（对象的类型也算是类型，first-class type）以及函数对象等。</p><p>但是对象在另外一个编程流派也有着特殊的含义。</p><h2 id="面向对象编程-object-oriented-programming" tabindex="-1">面向对象编程（Object-Oriented Programming） <a class="header-anchor" href="#面向对象编程-object-oriented-programming" aria-label="Permalink to &quot;面向对象编程（Object-Oriented Programming）&quot;">​</a></h2><p>面向对象编程是当前比较热门的一个编程范式（Programming Paradigm）。主要涉及通过抽象（abstraction）和多态（polymorphism）来进行程序建模和设计，以达到组件（Component）复用的目的。</p><p>简单地讲，就是面向对象会通过一种方式来定义一些共有的接口和符合接口的操作，然后通过对这些接口的实现来完成一些具有公共特性但细节上略有不一致的行为。</p><p>先看一个简单的例子。</p><p>不同的车（Vehicle）都可以走（Run），包括汽车（Car）、卡车（Truck）、推车（Wagon）等等。</p><p>我们可以简单地描述这种关系：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Pseudo code</span></span>
<span class="line"><span style="color:#A6ACCD;">interface Vehicle </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Car</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">is</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vehicle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Truck</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">is</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vehicle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Wagon</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">is</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vehicle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">Vehicle v </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> Car</span><span style="color:#89DDFF;">{}</span><span style="color:#676E95;font-style:italic;"> // or new Wagon/Truck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // run specific Run prodeure</span></span></code></pre></div><h2 id="基于继承-inheritance-的多态" tabindex="-1">基于继承（Inheritance）的多态 <a class="header-anchor" href="#基于继承-inheritance-的多态" aria-label="Permalink to &quot;基于继承（Inheritance）的多态&quot;">​</a></h2><h2 id="基于泛型-generics-的多态" tabindex="-1">基于泛型（Generics）的多态 <a class="header-anchor" href="#基于泛型-generics-的多态" aria-label="Permalink to &quot;基于泛型（Generics）的多态&quot;">​</a></h2>`,12),e=[o];function c(t,r,F,i,y,D){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{h as __pageData,C as default};
