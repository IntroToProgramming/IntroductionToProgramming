import{_ as i,c as h,z as p,a as n,E as a,B as s,O as o,G as r,o as f}from"./chunks/framework.41379913.js";const W=JSON.parse('{"title":"编码","description":"","frontmatter":{},"headers":[],"relativePath":"ch04_encoding.md"}'),C={name:"ch04_encoding.md"},y=p("h1",{id:"编码",tabindex:"-1"},[n("编码 "),p("a",{class:"header-anchor",href:"#编码","aria-label":'Permalink to "编码"'},"​")],-1),A=p("p",null,"这里的编码（Encoding）当然不是指简单的编写代码。",-1),x=p("p",null,"为什么会有这个概念呢。",-1),g=p("p",null,"想想古老的印度人是怎么表示数字的吧：用十个不同的符号和位序组合来表示一个确切的数字，演化成今天我们的用阿拉伯数字（Arabic Numerials）表示的十进制系统。",-1),T=p("p",null,[n("没错就是你身边到处都存在的"),p("strong",null,"数字"),n("。这套系统只需要简单的十个符号和并不怎么复杂的规则就能从0表示到任意大的确切数字。")],-1),b=p("p",null,"我们在第二讲中提到，代码中的表示的“整数”，跟数学意义上的整数，是有所差距的。这个差距其宗之一就在于表示数字的能力上。",-1),D={class:"katex"},F={class:"katex-mathml"},v=o('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">7</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),S=o('<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">pow</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">70</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>嗯，结果是什么鬼（<code>1.1805916207174113e+21</code>，特别是后面这段）！</p><p>也就是说，我们能直观表示的整数也就21位（十万亿亿级），再之后就只能用科学计数法表示了。</p><p>实际你会发现，其实还没到这个数量级的时候，数字就已经无法精确表示了。</p><p>为什么会这样呢？</p><h2 id="二进制" tabindex="-1">二进制 <a class="header-anchor" href="#二进制" aria-label="Permalink to &quot;二进制&quot;">​</a></h2><p>跟阿拉伯数字系统一样，计算机内部也是利用位序来表示数值，但犹豫数字电路只有通和断两种状态，所以，相当于每位上只能有两种状态，作为传统，我们将用0和1来表示这两种状态。</p>',7),I={class:"katex"},k={class:"katex-mathml"},P=o('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span></span></span>',1),z=o('<p>可是我们之前使用的过程告诉我们，其实并不是这样的。为什么呢？</p><h3 id="定长" tabindex="-1">定长 <a class="header-anchor" href="#定长" aria-label="Permalink to &quot;定长&quot;">​</a></h3><p>既然计算机表示数字就是靠0和1，那么如果我要表示多个数字，怎么来区分呢？</p><p>比如，你知道下面究竟是1，2，3，4还是13, 14？</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">11011100</span></span></code></pre></div><p>于是其实我们可以思考一下，出了数值，还有什么可以利用的。</p><p>长度。（以及其实你也可以用霍夫曼编码。）</p><p>当我规定用于表示数据的长度必须是一定（比如4位）的时候，表示数据就特别地清晰了：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0001</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0010</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0011</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0100</span></span></code></pre></div><p>就可以表示1，2，3，4这四个数。而上面那个我们理解不了的序列，也可以解释成13，14这两个数。</p><p>当你去规定一种解释二进制序列的方法的时候，其实你就是在定义一种<strong>编码</strong>。</p><p>二进制序列中，每个0或者1，叫一个bit（位），特定长度（一般是8）的基本解释单位，叫做byte（字节），这个特定长度，据说是依据当前系统中表示基本的字符编码的长度来确定。</p><p>换句话说，编码不仅仅是能用来表示数字的。</p><h2 id="ascii" tabindex="-1">ASCII <a class="header-anchor" href="#ascii" aria-label="Permalink to &quot;ASCII&quot;">​</a></h2><p>现在提到字节大家都会反应是8位，就是因为这个东西。</p><p>全名叫American Standard Code for Information Interchange（美国标准信息交换码）。</p><p>这套代码从上世纪60年代一致用到现在，足以说明有多么经典。然而我们先不说他是什么，简单的从我们自己的角度出发先设计一套东西。</p><h3 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h3><p>要知道美国人民的生活很是单调的，每天就面临大小写加起来四十多个字母，十个阿拉伯数字，以及十多个常用的标点符号。对比起来，深深地为自己的母语感到自豪。</p>',19),V={class:"katex"},q={class:"katex-mathml"},E=o('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">6</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">&lt;</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mrel">&lt;</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">7</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),U=o(`<p>比如我们可以定义，0000000 ～ 0001001 表示数字字符0-9， 0100001 ～ 0111010 表示大写字母字符的A-Z，1000001 ～ 1011010表示小写字母字符的a-z，于是我们就能对把对应的字母变成相应的编码了。</p><p>但是老是这样看着满屏的0和1，总是会感觉眼花。既然都是表示数据，并不是说相同的东西，计算机看到长什么样子，我们就要看一样的。只要是能够表示相同的数据，完全可以换一种我们更习惯的方式来表示。</p><h3 id="十六进制" tabindex="-1">十六进制 <a class="header-anchor" href="#十六进制" aria-label="Permalink to &quot;十六进制&quot;">​</a></h3><p>比如我们可以使用十六进制（Hexadecimal）代替二进制（Binary），也就是说，同一个位上面共有16个状态，习惯上分别用0-9加上a-f来表示，同时，为了与十进制表示进行区分，一般会加上0x前缀或者h后缀。对于刚刚的字符编码来说，就可以用0x00 ～ 0x09 表示 数字字符，0x21 ～ 0x3A 表示大写字母A-Z，0x40 ～ 0x5A表示小写字母a-z。</p><h4 id="为什么是十六进制而不是其他的十二进制或者十八、二十四进制呢" tabindex="-1">为什么是十六进制而不是其他的十二进制或者十八、二十四进制呢？ <a class="header-anchor" href="#为什么是十六进制而不是其他的十二进制或者十八、二十四进制呢" aria-label="Permalink to &quot;为什么是十六进制而不是其他的十二进制或者十八、二十四进制呢？&quot;">​</a></h4><p>我们可以简单的做一个对比：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Bin 0001 0010 0011 .... 1010 1011 1100 1101 1110 1111</span></span>
<span class="line"><span style="color:#A6ACCD;">Hex    1    2    3         A    B    C    D    E    F</span></span>
<span class="line"><span style="color:#A6ACCD;">Dec    1    2    3        10   11   12   13   14   15</span></span></code></pre></div><p>十六进制的一位刚好一一对应二进制的每四个位。</p><p>于是本来用二进制表示起来很冗长的东西，用十六进制可以比较轻松的表述出来。而且相互之间的转换也很容易。</p><p>相反生活中常用的十进制跟二进制对应的就不那么协调，所以一般也比较少用，只要知道对应的位上的值就好。</p><p>也就是说，只要能够数</p>`,11),N={class:"katex-display"},j={class:"katex"},B={class:"katex-mathml"},J=o('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">4</span><span class="mpunct">,</span><span class="mord mathrm">8</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">6</span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">4</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathrm">0</span><span class="mord mathrm">4</span><span class="mord mathrm">8</span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord mathrm">3</span><span class="mord mathrm">2</span><span class="mord mathrm">7</span><span class="mord mathrm">6</span><span class="mord mathrm">8</span><span class="mpunct">,</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span><span class="mord mathrm">5</span><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">3</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">7</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathrm">1</span><span class="mord mathrm">4</span><span class="mord mathrm">7</span><span class="mord mathrm">4</span><span class="mord mathrm">8</span><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span><span class="mord mathrm">8</span></span></span>',1),R=o(`<p>嗯，我觉得如果你玩过2048的话一定不会对前面的那些数字感到陌生。</p><h3 id="ascii-1" tabindex="-1">ASCII <a class="header-anchor" href="#ascii-1" aria-label="Permalink to &quot;ASCII&quot;">​</a></h3><p>嗯，ASCII跟我们想的一样，选择了8位作为实际的长度，同时加入了一些必须要用到的特殊字符（比如制表符tab 0x09，回车记号carriage return 0x0D，换行符line feed 0x0A..），以及一些控制字符（比如空字符NUL 0x00，文件结束符EOF等）。于是整体的设计相对于我们的想法有一些偏移：</p><ul><li><code>\\x30</code> ～ <code>\\x39</code> 表示0-9</li><li><code>\\x41</code> ～ <code>\\x5a</code> 表示A-Z</li><li><code>\\x61</code> ～ <code>\\x7a</code> 表示a-z</li></ul><p>好的我们来试试吧：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x41</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>我们可以直接用引号<code>&#39;</code>括起来单个字符，在程序中直接拿来使用。同时也可以反过来看：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a_char </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a_char</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charCodeAt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="cjk字符集" tabindex="-1">CJK字符集 <a class="header-anchor" href="#cjk字符集" aria-label="Permalink to &quot;CJK字符集&quot;">​</a></h3><p>CJK（有时候也会带上V），是China，Japan，Korea（和Vietnam）的统称，在这些地区，因为同遗传自古汉语，字符的数量可是非常之多，8位的ASCII根本就没办法保存这么多东西。</p><p>于是随着各种语言诞生了各种编码，比如<code>GB2312</code> 简体中文，<code>Big-5</code> 繁体中文，<code>Shift-JIS</code> 日文等。这些编码并不是相互兼容的，于是一般对于特定的内容，需要专门指出其编码。同样地，当你尝试去一种编码来解释另外一种编码的文本时，就会出现<strong>乱码</strong>的情况。注意这个时候并不是你电脑中毒了。</p><h3 id="unicode" tabindex="-1">Unicode <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;Unicode&quot;">​</a></h3><p>所以就有人想，不如把所有的编码都统一了吧，于是就出现了Unicode。</p><p>现行版本的Unicode加入了世界上能够找到的绝大多数语言的符号（嗯，包括emoji），然后将这些符号分类整理，统一编码。于是，在理想情况下，大家都使用Unicode字符集的话，就不会出现乱码的错误了。</p><p>Unicode包含的字符量足够的多，于是就要设计比ASCII更充分大的表示方式才能够容纳所有的符号。最初选择的是每个字符使用16位的二进制串来表示，这样的话一个中文字符虽然会超出8位范围之外，还是能够表示得出来，这种方法被称为UTF-16。</p><p>然而不久就发现，符号的数量（就算仅仅是中文字符）远远多于65536个，于是又进一步地扩充到了32位，可以表示到上亿个字符了，目前为止还要很久才会资源枯竭，这种方法类似地，被称为UTF-32。</p><p>然而UTF-32有个很致命的缺点。</p><p>对于西方人来说，并没有CJKV地区的人的需求，1个字节就能足够表示他们的符号，而UTF-32硬生生地为了统一，要求字母字符也要用4个字节来表示，这样就让空间整整大了4倍，而且另外3倍的空间完全是浪费掉的，没有任何作用。</p><p>但是，为了兼容，没办法。</p><h3 id="utf-8" tabindex="-1">UTF-8 <a class="header-anchor" href="#utf-8" aria-label="Permalink to &quot;UTF-8&quot;">​</a></h3><p>于是为了解决这个浪费空间的问题，UTF-8出现了。这是来自Ken Thompson的设计，他给整个IT界贡献了不少东西，Unix、C语言、UTF-8。</p><p>简单来说就是，在保持与ASCII兼容的情况下，通过添加一些标记来支持更长的编码。</p><p>具体的做法当然维基百科介绍的比我更清楚，这里提起来只是要说这么一个思路：变长编码（Variable-Width Encoding）。因为比较重要的就是在设计的过程中考虑变量和不变量，以及设置各种标志和不同的数据区块解释方式，这样就可以把简单的二进制序列变成我们想要的任意数据。</p><p>当然，这里的思想我们会在第6章详细地展开。</p><h2 id="数系的扩充" tabindex="-1">数系的扩充 <a class="header-anchor" href="#数系的扩充" aria-label="Permalink to &quot;数系的扩充&quot;">​</a></h2><p>你有没有尝试计算JavaScript里面<code>1/3</code>的结果？</p><p>当我们需要小数的时候又该如何表示呢？</p><p>这个问题留作练习。</p><p>作为参考答案，你可以搜索IEEE754。</p>`,29);function K(w,$,O,Z,G,H){const l=r("mn"),c=r("mrow"),_=r("msup"),m=r("annotation"),d=r("semantics"),u=r("math"),t=r("mo"),e=r("mi");return f(),h("div",null,[y,A,x,g,T,b,p("p",null,[n("比如，我们来计算"),p("span",D,[p("span",F,[a(u,null,{default:s(()=>[a(d,null,{default:s(()=>[a(c,null,{default:s(()=>[a(_,null,{default:s(()=>[a(l,null,{default:s(()=>[n("2")]),_:1}),a(c,null,{default:s(()=>[a(l,null,{default:s(()=>[n("7")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1})]),_:1})]),_:1})]),_:1}),a(m,{encoding:"application/x-tex"},{default:s(()=>[n("2^{70}")]),_:1})]),_:1})]),_:1})]),v]),n("：")]),S,p("p",null,[n("然后我们就会看到计算机努力的表示数字： "),p("span",I,[p("span",k,[a(u,null,{default:s(()=>[a(d,null,{default:s(()=>[a(c,null,{default:s(()=>[a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1})]),_:1}),a(m,{encoding:"application/x-tex"},{default:s(()=>[n("0,1,10,11,100,101,110,111,1000,1001,1010")]),_:1})]),_:1})]),_:1})]),P]),n(" 等你都觉得脑袋大了，计算机才数到10，不过其实关于这个问题并不需要你操心太多，反正跟阿拉伯数字一样，只要足够长，任意大的数都可以表示。")]),z,p("p",null,[n("当然，美国人民日常使用的字符量少，在信息化的时代，其实是有优势的，比如，把他们常用的字符加起来也就100个左右，而"),p("span",V,[p("span",q,[a(u,null,{default:s(()=>[a(d,null,{default:s(()=>[a(c,null,{default:s(()=>[a(_,null,{default:s(()=>[a(l,null,{default:s(()=>[n("2")]),_:1}),a(c,null,{default:s(()=>[a(l,null,{default:s(()=>[n("6")]),_:1})]),_:1})]),_:1}),a(t,null,{default:s(()=>[n("<")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(t,null,{default:s(()=>[n("<")]),_:1}),a(_,null,{default:s(()=>[a(l,null,{default:s(()=>[n("2")]),_:1}),a(l,null,{default:s(()=>[n("7")]),_:1})]),_:1})]),_:1}),a(m,{encoding:"application/x-tex"},{default:s(()=>[n("2^{6} \\lt 100 \\lt 2^7")]),_:1})]),_:1})]),_:1})]),E]),n("，所以我们只要有长度为7位的二进制串长度就能把美国人民用的那些字符给完全表示出来。")]),U,p("p",null,[p("span",N,[p("span",j,[p("span",B,[a(u,null,{default:s(()=>[a(d,null,{default:s(()=>[a(c,null,{default:s(()=>[a(l,null,{default:s(()=>[n("1")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("8")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("6")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(l,null,{default:s(()=>[n("8")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("3")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(l,null,{default:s(()=>[n("7")]),_:1}),a(l,null,{default:s(()=>[n("6")]),_:1}),a(l,null,{default:s(()=>[n("8")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("6")]),_:1}),a(l,null,{default:s(()=>[n("5")]),_:1}),a(l,null,{default:s(()=>[n("5")]),_:1}),a(l,null,{default:s(()=>[n("3")]),_:1}),a(l,null,{default:s(()=>[n("6")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("3")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("0")]),_:1}),a(l,null,{default:s(()=>[n("7")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(e,{mathvariant:"normal"},{default:s(()=>[n(".")]),_:1}),a(t,{separator:"true"},{default:s(()=>[n(",")]),_:1}),a(l,null,{default:s(()=>[n("2")]),_:1}),a(l,null,{default:s(()=>[n("1")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(l,null,{default:s(()=>[n("7")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(l,null,{default:s(()=>[n("8")]),_:1}),a(l,null,{default:s(()=>[n("3")]),_:1}),a(l,null,{default:s(()=>[n("6")]),_:1}),a(l,null,{default:s(()=>[n("4")]),_:1}),a(l,null,{default:s(()=>[n("8")]),_:1})]),_:1}),a(m,{encoding:"application/x-tex"},{default:s(()=>[n("1,2,4,8,16,...,1024,2048,...,32768,65536, 131072,...,2147483648 ")]),_:1})]),_:1})]),_:1})]),J])])]),R])}const M=i(C,[["render",K]]);export{W as __pageData,M as default};
